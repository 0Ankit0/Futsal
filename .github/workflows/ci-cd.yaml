name: Aspire CI/CD

on:
  push:
    branches: ["master"]

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Publish Aspire App Manifest
        run: |
          # Generate the manifest files. This creates a 'publish' directory
          # in the root of the workspace.
          dotnet run --project FutsalApi/FutsalApi.AppHost --publisher manifest --output-path ${{ github.workspace }}/publish

      - name: Rename manifest for deployment
        run: |
          # The dotnet command creates a file named 'publish' inside the directory.
          # We rename it to 'manifest.json' so the deployment step can find it.
          mv ${{ github.workspace }}/publish/publish ${{ github.workspace }}/publish/manifest.json

      - name: Debug - List publish directory contents
        run: |
          echo "Contents of ./publish directory after rename:"
          ls -la ${{ github.workspace }}/publish

      - name: Deploy to DigitalOcean - Prepare remote
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          password: ${{ secrets.DO_PASSWORD }}
          script: |
            # Stop and remove any previous containers gracefully
            if docker ps -q | grep .; then
              echo "Stopping running Docker containers..."
              docker stop $(docker ps -q)
            else
              echo "No running Docker containers to stop."
            fi

            if docker ps -aq | grep .; then
              echo "Removing all Docker containers..."
              docker rm $(docker ps -aq)
            else
              echo "No Docker containers to remove."
            fi

            # Clean and create the app directory
            echo "Recreating app directory..."
            rm -rf /home/${{ secrets.DO_USERNAME }}/app
            mkdir -p /home/${{ secrets.DO_USERNAME }}/app

      - name: Copy published files to DigitalOcean
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          password: ${{ secrets.DO_PASSWORD }}
          # Copy all files from the 'publish' directory.
          # We remove 'strip_components' as it's not needed and was causing the error.
          source: "publish/*"
          target: "/home/${{ secrets.DO_USERNAME }}/app"

      - name: Deploy using Aspire Manifest
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          password: ${{ secrets.DO_PASSWORD }}
          script: |
            cd /home/${{ secrets.DO_USERNAME }}/app
            echo "Listing files in remote app directory:"
            ls -la

            # Check if manifest.json exists and deploy
            if [ -f "manifest.json" ]; then
              echo "Found manifest.json, deploying using Aspire manifest..."
              # Ensure Aspire CLI is installed
              if ! command -v aspire &> /dev/null; then
                echo "Aspire CLI not found, installing..."
                # Use 'dotnet tool install' for .NET 8+
                dotnet workload install aspire
                # The tool path needs to be added to the shell's PATH
                export PATH="$PATH:/home/${{ secrets.DO_USERNAME }}/.dotnet/tools"
              else
                echo "Aspire CLI already installed."
              fi
              
              # Deploy using the manifest
              # Ensure the correct command for your Aspire version is used.
              # For newer versions, you might need to use 'azd' or a different command.
              # This example assumes a direct 'aspire' command or similar deployment tool.
              # You might need to adjust this based on your specific Aspire setup.
              # For now, we assume a placeholder for the actual deployment command
              echo "Deployment command would run here with manifest.json"
              # For example: aspire deploy --manifest manifest.json
              # Or for docker-compose generated by aspire:
              if [ -f "docker-compose.yml" ]; then
                  docker compose up -d --build
              fi
            else
              echo "ERROR: No manifest.json found for deployment!"
              exit 1
            fi
