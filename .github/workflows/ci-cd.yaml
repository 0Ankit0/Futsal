name: Aspire CI/CD

on:
  push:
    branches: ["master"]

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Publish Aspire App Manifest
        run: |
          # Generate the manifest files (Aspire workload should already be installed on the runner)
          dotnet run --project FutsalApi/FutsalApi.AppHost --publisher manifest --output-path ./publish

      - name: Debug - List publish directory contents
        run: |
          echo "Contents of ./publish directory:"
          ls -la ./publish || echo "Publish directory does not exist"
          echo "Contents of current directory:"
          ls -la .
          echo "Total files in publish directory (if exists):"
          find ./publish -type f 2>/dev/null | wc -l || echo "0"

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          password: ${{ secrets.DO_PASSWORD }}
          script: |
            # Stop and remove any previous containers
            docker stop $(docker ps -q) || true
            docker rm $(docker ps -aq) || true
            # Remove the old app directory
            rm -rf /home/${{ secrets.DO_USERNAME }}/app
            # Create a new directory for the app
            mkdir -p /home/${{ secrets.DO_USERNAME }}/app

      - name: Copy published files to DigitalOcean
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          password: ${{ secrets.DO_PASSWORD }}
          source: "publish/*"
          target: "/home/${{ secrets.DO_USERNAME }}/app"
          strip_components: 1

      - name: Deploy using Aspire Manifest
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          password: ${{ secrets.DO_PASSWORD }}
          script: |
            cd /home/${{ secrets.DO_USERNAME }}/app
            # Check if manifest.json exists
            if [ -f "manifest.json" ]; then
              echo "Found manifest.json, deploying using Aspire manifest..."
              # Install aspire CLI if not already installed
              which aspire || dotnet tool install -g Microsoft.Extensions.Hosting.Aspire
              # Deploy using the manifest
              aspire deploy --manifest manifest.json
            else
              echo "No manifest.json found, listing available files:"
              ls -la
              # Fallback to docker compose if docker-compose.yml exists
              if [ -f "docker-compose.yml" ]; then
                echo "Found docker-compose.yml, using docker compose..."
                docker compose up -d --build
              elif [ -f "compose.yaml" ]; then
                echo "Found compose.yaml, using docker compose..."
                docker compose up -d --build
              else
                echo "No deployment files found!"
                exit 1
              fi
            fi
