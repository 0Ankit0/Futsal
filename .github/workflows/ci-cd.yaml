name: Futsal API CI/CD

on:
  push:
    branches: ["master"]

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # Install aspirate if not installed
      # - name: Ensure aspirate is installed
      #   run: |
      #     if ! command -v aspirate &> /dev/null; then
      #       dotnet tool install --global aspirate
      #     else
      #       echo "aspirate is already installed"
      #     fi

      # - name: Add dotnet tools to PATH
      #   run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # # Generate Docker Compose file using Aspire
      # - name: Generate Docker Compose
      #   env:
      #     SECRET_PASSWORD: ${{ secrets.SECRET_PASSWORD }}
      #   run: |
      #     mkdir -p ./publish
      #     cd FutsalApi/FutsalApi.AppHost
      #     aspirate generate --output-format compose --output-path ../../publish --non-interactive --include-dashboard --secret-password "$SECRET_PASSWORD"

      - name: Deploy Application
        env:
          SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          PGADMIN_EMAIL: ${{ secrets.PGADMIN_EMAIL }}
          PGADMIN_PASSWORD: ${{ secrets.PGADMIN_PASSWORD }}
          DASHBOARD_API_KEY: ${{ secrets.DASHBOARD_API_KEY }}
          DASHBOARD_PASSWORD: ${{ secrets.DASHBOARD_PASSWORD }}
        run: |
          cd ${{ github.workspace }}/publish/

           # Create .env file with environment variables
          cat > .env << EOF
          REDIS_PASSWORD=$REDIS_PASSWORD
          POSTGRES_PASSWORD=$POSTGRES_PASSWORD
          PGADMIN_EMAIL=$PGADMIN_EMAIL
          PGADMIN_PASSWORD=$PGADMIN_PASSWORD
          DASHBOARD_API_KEY=$DASHBOARD_API_KEY
          DASHBOARD_PASSWORD=$DASHBOARD_PASSWORD
          EOF

          echo "$SUDO_PASSWORD" | sudo -S docker-compose -p futsal down || true
          echo "$SUDO_PASSWORD" | sudo -S docker-compose -p futsalapi down || true
          echo "$SUDO_PASSWORD" | sudo -S docker system prune -f || true
          echo "$SUDO_PASSWORD" | sudo -S docker volume prune -f || true
          echo "$SUDO_PASSWORD" | sudo -S docker container prune -f || true


          # Create latest apiservice image
          echo "Building apiservice image..."
          echo "$SUDO_PASSWORD" | sudo -S docker build -f ../FutsalApi/FutsalApi.ApiService/Dockerfile -t futsal/apiservice:latest ../FutsalApi

          echo "$SUDO_PASSWORD" | sudo -S docker-compose --env-file .env -p futsalapi up -d --build --force-recreate

          # Health check loop for apiservice
          for i in {1..30}; do
            if echo "$SUDO_PASSWORD" | sudo -S docker ps | grep -q "apiservice"; then
              STATUS=$(echo "$SUDO_PASSWORD" | sudo -S docker inspect --format='{{.State.Health.Status}}' apiservice 2>/dev/null || echo "unknown")
              if [ "$STATUS" = "healthy" ] || [ "$STATUS" = "running" ] || [ "$STATUS" = "unknown" ]; then
                echo "✅ Deployment successful"
                echo "$SUDO_PASSWORD" | sudo -S docker ps --filter "name=apiservice"
                break
              fi
            fi
            sleep 2
          done

          # If not healthy after loop, show logs and fail
          if ! echo "$SUDO_PASSWORD" | sudo -S docker ps | grep -q "apiservice"; then
            echo "❌ Deployment failed"
            echo "$SUDO_PASSWORD" | sudo -S docker-compose -p futsalapi logs
            exit 1
          fi
